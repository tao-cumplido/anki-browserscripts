module.exports = {
   extends: ['eslint:recommended', 'prettier'],
   plugins: ['module-imports'],
   parserOptions: {
      ecmaVersion: 2020,
   },
   rules: {
      // possible errors
      'no-cond-assign': ['error', 'always'],
      'no-empty': ['error', { allowEmptyCatch: true }],
      // best practices
      'curly': 'error',
      'eqeqeq': ['error', 'always'],
      'max-classes-per-file': 'error',
      'no-else-return': 'error',
      'no-empty-function': 'error',
      'no-eval': 'error',
      'no-floating-decimal': 'error',
      'no-implicit-coercion': 'error',
      'no-labels': 'error',
      'no-multi-str': 'error',
      'no-new': 'error',
      'no-new-func': 'error',
      'no-octal-escape': 'error',
      'no-return-assign': 'error',
      'no-return-await': 'error',
      'no-self-compare': 'error',
      'no-sequences': 'error',
      'no-throw-literal': 'error',
      'no-unused-expressions': 'error',
      'no-useless-call': 'error',
      'no-useless-concat': 'error',
      'no-useless-return': 'error',
      'no-void': 'error',
      'no-warning-comments': ['error', { location: 'anywhere' }],
      'prefer-promise-reject-errors': 'error',
      'require-await': 'error',
      'wrap-iife': 'error',
      'yoda': 'error',
      // variables
      'no-shadow': 'error',
      'no-undef': 'off',
      'no-undef-init': 'error',
      // stylistic issues
      'camelcase': ['error', { allow: ['^GM_'] }],
      'no-lonely-if': 'error',
      'no-mixed-operators': 'error',
      'no-multi-assign': 'error',
      'no-negated-condition': 'error',
      'no-nested-ternary': 'error',
      'no-new-object': 'error',
      'no-underscore-dangle': ['error', { allow: ['_'], enforceInMethodNames: true }],
      'no-unneeded-ternary': 'error',
      'prefer-object-spread': 'error',
      // es6
      'max-classes-per-file': 'off',
      'no-useless-computed-key': 'error',
      'no-var': 'error',
      'object-shorthand': 'error',
      'prefer-arrow-callback': 'error',
      'prefer-const': 'error',
      'prefer-rest-params': 'error',
      'prefer-spread': 'error',
      'prefer-template': 'error',
      'require-yield': 'error',
      'sort-imports': 'off',
      'symbol-description': 'error',
      // plugins
      'module-imports/group': ['error'],
      'module-imports/sort': ['error', { caseGroups: true }],
   },
   overrides: [
      {
         files: '*.ts',
         parser: '@typescript-eslint/parser',
         extends: [
            'eslint:recommended',
            'plugin:@typescript-eslint/eslint-recommended',
            'plugin:@typescript-eslint/recommended',
            'plugin:@typescript-eslint/recommended-requiring-type-checking',
            'prettier',
            'prettier/@typescript-eslint',
         ],
         parserOptions: {
            ecmaVersion: 2020,
            project: ['./tsconfig.json'],
         },
         rules: {
            '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],
            '@typescript-eslint/ban-ts-comment': 'error',
            '@typescript-eslint/ban-types': [
               'error',
               {
                  types: {
                     '{}': { fixWith: 'object' },
                     'Boolean': { fixWith: 'boolean' },
                     'Number': { fixWith: 'number' },
                     'BigInt': { fixWith: 'bigint' },
                     'String': { fixWith: 'string' },
                  },
               },
            ],
            '@typescript-eslint/consistent-type-assertions': [
               'error',
               {
                  assertionStyle: 'as',
                  objectLiteralTypeAssertions: 'allow-as-parameter',
               },
            ],
            '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
            '@typescript-eslint/explicit-function-return-type': 'off',
            '@typescript-eslint/explicit-member-accessibility': ['error', { accessibility: 'no-public' }],
            '@typescript-eslint/member-ordering': [
               'error',
               {
                  default: [
                     'private-static-field',
                     'protected-static-field',
                     'public-static-field',
                     'private-static-method',
                     'protected-static-method',
                     'public-static-method',
                     'signature',
                     'protected-abstract-field',
                     'public-abstract-field',
                     'private-instance-field',
                     'protected-instance-field',
                     'public-instance-field',
                     'field',
                     'private-constructor',
                     'protected-constructor',
                     'public-constructor',
                     'constructor',
                     'protected-abstract-method',
                     'protected-instance-method',
                     'private-instance-method',
                     'public-abstract-method',
                     'public-instance-method',
                     'method',
                  ],
               },
            ],
            '@typescript-eslint/no-dynamic-delete': 'error',
            '@typescript-eslint/no-extraneous-class': ['error', { allowWithDecorator: true }],
            '@typescript-eslint/no-non-null-assertion': 'error',
            '@typescript-eslint/no-require-imports': 'error',
            '@typescript-eslint/no-useless-constructor': 'error',
            '@typescript-eslint/prefer-as-const': 'error',
            '@typescript-eslint/prefer-function-type': 'error',
            '@typescript-eslint/prefer-optional-chain': 'error',
            // rules requiring type information
            '@typescript-eslint/no-floating-promises': 'error',
            '@typescript-eslint/no-implied-eval': 'error',
            '@typescript-eslint/no-misused-promises': ['error', { checksVoidReturn: false }],
            '@typescript-eslint/no-throw-literal': 'error',
            '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
            '@typescript-eslint/no-unnecessary-condition': ['error', { ignoreRhs: true }],
            '@typescript-eslint/no-unnecessary-type-arguments': 'error',
            '@typescript-eslint/no-unsafe-assignment': 'error',
            '@typescript-eslint/no-unsafe-call': 'error',
            '@typescript-eslint/no-unsafe-member-access': 'error',
            '@typescript-eslint/no-unsafe-return': 'error',
            '@typescript-eslint/no-unused-vars-experimental': 'error',
            '@typescript-eslint/prefer-nullish-coalescing': 'error',
            '@typescript-eslint/prefer-readonly': 'error',
            // eslint extension rules
            'no-dupe-class-members': 'off',
            'no-unused-expressions': 'off',
            '@typescript-eslint/camelcase': ['error', { allow: ['^GM_'] }],
            '@typescript-eslint/no-dupe-class-members': 'error',
            '@typescript-eslint/no-unused-expressions': 'error',
            '@typescript-eslint/no-unused-vars': 'off',
         },
      },
   ],
};
